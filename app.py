import os
import json
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse

app = Flask(__name__)

# --- Safe Loading of the Health Database ---
# This prevents the app from crashing if the JSON file is missing or invalid on startup.
try:
    with open('database.json', 'r', encoding='utf-8') as f:
        health_data = json.load(f)
except FileNotFoundError:
    print("FATAL ERROR: database.json not found. The app will run but will have no disease data.")
    health_data = {"diseases": {}}
except json.JSONDecodeError:
    print("FATAL ERROR: database.json is not a valid JSON file. Please check for syntax errors.")
    health_data = {"diseases": {}}


# In-memory session storage for multi-turn conversation
user_sessions = {}

# --- Trilingual Translations ---
translations = {
    "en": {
        "welcome": "Hello! I am MO Swasthya Saathi üôè\nPlease select your language:\n1. English\n2. ‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)\n3. ‡¨ì‡¨°‡¨º‡¨ø‡¨Ü (Odia)",
        "menu": "How can I help you?\n1. Check Symptoms\n2. Health Alerts\n3. Vaccination Info\n4. Search Disease Info\n\n(You can type 'menu' anytime to return here)",
        "symptom_prompt": "Please describe your symptoms. For example: 'I have fever, headache, and a cough'.",
        "symptom_repeat": "You can now check another set of symptoms, or type 'menu' to return to the main menu.",
        "disease_prompt": "Please enter the name of the disease you want to know about (e.g., Malaria).",
        "disease_repeat": "You can now search for another disease, or type 'menu' to return to the main menu.",
        "alert_info": "Current Health Alert for Bhubaneswar (as of Sep 2025): Increased Dengue cases reported. Please ensure there is no stagnant water near your home.",
        "vaccine_info": health_data.get("vaccination_schedule_en", "Vaccination info not found."),
        "no_diagnosis": "I could not identify a specific condition from those symptoms. For accurate advice, please consult a doctor.",
        "disease_not_found": "Sorry, I could not find information about that disease in my database.",
        "consult_doctor": "Please note: This is not a medical diagnosis. You should consult with a real doctor.",
        "error": "Sorry, an error occurred. Please try again later."
    },
    "hi": {
        "welcome": "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§π‡•Ç‡§Å ‡§Æ‡•ã ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§æ‡§•‡•Ä üôè\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:\n1. English\n2. ‡§π‡§ø‡§Ç‡§¶‡•Ä\n3. ‡¨ì‡¨°‡¨º‡¨ø‡¨Ü (Odia)",
        "menu": "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?\n1. ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç\n2. ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Ö‡§≤‡§∞‡•ç‡§ü\n3. ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä\n4. ‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ñ‡•ã‡§ú‡•á‡§Ç\n\n(‡§Ü‡§™ ‡§ï‡§≠‡•Ä ‡§≠‡•Ä 'menu' ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§ï‡•á ‡§Ø‡§π‡§æ‡§Ç ‡§≤‡•å‡§ü ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç)",
        "symptom_prompt": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£: '‡§Æ‡•Å‡§ù‡•á ‡§¨‡•Å‡§ñ‡§æ‡§∞, ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§î‡§∞ ‡§ñ‡§æ‡§Ç‡§∏‡•Ä ‡§π‡•à‡•§'",
        "symptom_repeat": "‡§Ö‡§¨ ‡§Ü‡§™ ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§è‡§ï ‡§î‡§∞ ‡§∏‡•á‡§ü ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§Ø‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§≤‡•å‡§ü‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è 'menu' ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "disease_prompt": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§∞‡•ã‡§ó ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§™ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç (‡§ú‡•à‡§∏‡•á, ‡§Æ‡§≤‡•á‡§∞‡§ø‡§Ø‡§æ)‡•§",
        "disease_repeat": "‡§Ö‡§¨ ‡§Ü‡§™ ‡§ï‡§ø‡§∏‡•Ä ‡§Ö‡§®‡•ç‡§Ø ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§Ø‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§≤‡•å‡§ü‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è 'menu' ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "alert_info": "‡§≠‡•Å‡§µ‡§®‡•á‡§∂‡•ç‡§µ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Ö‡§≤‡§∞‡•ç‡§ü (‡§∏‡§ø‡§§‡§Ç‡§¨‡§∞ 2025 ‡§§‡§ï): ‡§°‡•á‡§Ç‡§ó‡•Ç ‡§ï‡•á ‡§Æ‡§æ‡§Æ‡§≤‡•á ‡§¨‡§¢‡§º‡•á ‡§π‡•à‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•á ‡§ò‡§∞ ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§™‡§æ‡§®‡•Ä ‡§ú‡§Æ‡§æ ‡§® ‡§π‡•ã‡•§",
        "vaccine_info": health_data.get("vaccination_schedule_hi", "‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§"),
        "no_diagnosis": "‡§Æ‡•à‡§Ç ‡§á‡§® ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§∏‡•á ‡§ï‡§ø‡§∏‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§æ‡•§ ‡§∏‡§ü‡•Ä‡§ï ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§≤‡•á‡§Ç‡•§",
        "disease_not_found": "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•Å‡§ù‡•á ‡§Æ‡•á‡§∞‡•á ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Æ‡•á‡§Ç ‡§â‡§∏ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§",
        "consult_doctor": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç: ‡§Ø‡§π ‡§è‡§ï ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡•Ä‡§Ø ‡§®‡§ø‡§¶‡§æ‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§Ü‡§™‡§ï‡•ã ‡§è‡§ï ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§",
        "error": "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
    },
    "or": {
        "welcome": "‡¨®‡¨Æ‡¨∏‡≠ç‡¨ï‡¨æ‡¨∞! ‡¨Æ‡≠Å‡¨Å MO ‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨∏‡¨æ‡¨•‡≠Ä üôè\n‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï ‡¨≠‡¨æ‡¨∑‡¨æ ‡¨¨‡¨æ‡¨õ‡¨®‡≠ç‡¨§‡≠Å:\n1. English\n2. ‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)\n3. ‡¨ì‡¨°‡¨º‡¨ø‡¨Ü",
        "menu": "‡¨Æ‡≠Å‡¨Å ‡¨ï‡¨ø‡¨™‡¨∞‡¨ø ‡¨∏‡¨æ‡¨π‡¨æ‡¨Ø‡≠ç‡≠ü ‡¨ï‡¨∞‡¨ø‡¨™‡¨æ‡¨∞‡¨ø‡¨¨‡¨ø?\n1. ‡¨≤‡¨ï‡≠ç‡¨∑‡¨£ ‡¨Ø‡¨æ‡¨û‡≠ç‡¨ö ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å\n2. ‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨∏‡¨§‡¨∞‡≠ç‡¨ï‡¨§‡¨æ\n3. ‡¨ü‡≠Ä‡¨ï‡¨æ‡¨ï‡¨∞‡¨£ ‡¨∏‡≠Ç‡¨ö‡¨®‡¨æ\n4. ‡¨∞‡≠ã‡¨ó ‡¨∏‡≠Ç‡¨ö‡¨®‡¨æ ‡¨ñ‡≠ã‡¨ú‡¨®‡≠ç‡¨§‡≠Å\n\n(‡¨Ü‡¨™‡¨£ ‡¨Ø‡≠á‡¨ï‡≠å‡¨£‡¨∏‡¨ø ‡¨∏‡¨Æ‡≠ü‡¨∞‡≠á 'menu' ‡¨ü‡¨æ‡¨á‡¨™‡≠ç ‡¨ï‡¨∞‡¨ø ‡¨è‡¨†‡¨æ‡¨ï‡≠Å ‡¨´‡≠á‡¨∞‡¨ø‡¨™‡¨æ‡¨∞‡¨ø‡¨¨‡≠á)",
        "symptom_prompt": "‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï ‡¨≤‡¨ï‡≠ç‡¨∑‡¨£ ‡¨¨‡¨∞‡≠ç‡¨£‡≠ç‡¨£‡¨®‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§ ‡¨â‡¨¶‡¨æ‡¨π‡¨∞‡¨£: '‡¨Æ‡≠ã‡¨§‡≠á ‡¨ú‡≠ç‡≠±‡¨∞, ‡¨Æ‡≠Å‡¨£‡≠ç‡¨°‡¨¨‡¨ø‡¨®‡≠ç‡¨ß‡¨æ, ‡¨è‡¨¨‡¨Ç ‡¨ï‡¨æ‡¨∂ ‡¨Ö‡¨õ‡¨ø'‡•§",
        "symptom_repeat": "‡¨Ü‡¨™‡¨£ ‡¨¨‡¨∞‡≠ç‡¨§‡≠ç‡¨§‡¨Æ‡¨æ‡¨® ‡¨Ü‡¨â ‡¨è‡¨ï ‡¨≤‡¨ï‡≠ç‡¨∑‡¨£ ‡¨∏‡≠á‡¨ü‡≠ç ‡¨Ø‡¨æ‡¨û‡≠ç‡¨ö ‡¨ï‡¨∞‡¨ø‡¨™‡¨æ‡¨∞‡¨ø‡¨¨‡≠á, ‡¨ï‡¨ø‡¨Æ‡≠ç‡¨¨‡¨æ ‡¨Æ‡≠Å‡¨ñ‡≠ç‡≠ü ‡¨Æ‡≠á‡¨®‡≠Å‡¨ï‡≠Å ‡¨´‡≠á‡¨∞‡¨ø‡¨¨‡¨æ‡¨ï‡≠Å 'menu' ‡¨ü‡¨æ‡¨á‡¨™‡≠ç ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§",
        "disease_prompt": "‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨∏‡≠á‡¨π‡¨ø ‡¨∞‡≠ã‡¨ó‡¨∞ ‡¨®‡¨æ‡¨Æ ‡¨≤‡≠á‡¨ñ‡¨®‡≠ç‡¨§‡≠Å ‡¨Ø‡¨æ‡¨π‡¨æ ‡¨¨‡¨ø‡¨∑‡≠ü‡¨∞‡≠á ‡¨Ü‡¨™‡¨£ ‡¨ú‡¨æ‡¨£‡¨ø‡¨¨‡¨æ‡¨ï‡≠Å ‡¨ö‡¨æ‡¨π‡¨æ‡¨Å‡¨®‡≠ç‡¨§‡¨ø (‡¨â‡¨¶‡¨æ‡¨π‡¨∞‡¨£: ‡¨Æ‡≠ç‡≠ü‡¨æ‡¨≤‡≠á‡¨∞‡¨ø‡¨Ü)‡•§",
        "disease_repeat": "‡¨Ü‡¨™‡¨£ ‡¨¨‡¨∞‡≠ç‡¨§‡≠ç‡¨§‡¨Æ‡¨æ‡¨® ‡¨Ö‡¨®‡≠ç‡≠ü ‡¨è‡¨ï ‡¨∞‡≠ã‡¨ó ‡¨ñ‡≠ã‡¨ú‡¨ø ‡¨™‡¨æ‡¨∞‡¨ø‡¨¨‡≠á, ‡¨ï‡¨ø‡¨Æ‡≠ç‡¨¨‡¨æ ‡¨Æ‡≠Å‡¨ñ‡≠ç‡≠ü ‡¨Æ‡≠á‡¨®‡≠Å‡¨ï‡≠Å ‡¨´‡≠á‡¨∞‡¨ø‡¨¨‡¨æ‡¨ï‡≠Å 'menu' ‡¨ü‡¨æ‡¨á‡¨™‡≠ç ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§",
        "alert_info": "‡¨≠‡≠Å‡¨¨‡¨®‡≠á‡¨∂‡≠ç‡≠±‡¨∞ ‡¨™‡¨æ‡¨á‡¨Å ‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨∏‡¨§‡¨∞‡≠ç‡¨ï‡¨§‡¨æ (‡¨∏‡≠á‡¨™‡≠ç‡¨ü‡≠á‡¨Æ‡≠ç‡¨¨‡¨∞ 2025 ‡¨∏‡≠Å‡¨¶‡≠ç‡¨ß‡¨æ): ‡¨°‡≠á‡¨ô‡≠ç‡¨ó‡≠Å ‡¨Æ‡¨æ‡¨Æ‡¨≤‡¨æ ‡¨¨‡≠É‡¨¶‡≠ç‡¨ß‡¨ø ‡¨™‡¨æ‡¨á‡¨õ‡¨ø‡•§ ‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï ‡¨ò‡¨∞ ‡¨™‡¨æ‡¨ñ‡¨∞‡≠á ‡¨™‡¨æ‡¨£‡¨ø ‡¨ú‡¨Æ‡¨æ ‡¨®‡¨π‡≠á‡¨¨‡¨æ‡¨ï‡≠Å ‡¨¶‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å‡•§",
        "vaccine_info": health_data.get("vaccination_schedule_or", "‡¨ü‡≠Ä‡¨ï‡¨æ‡¨ï‡¨∞‡¨£ ‡¨∏‡≠Ç‡¨ö‡¨®‡¨æ ‡¨Æ‡¨ø‡¨≥‡¨ø‡¨≤‡¨æ ‡¨®‡¨æ‡¨π‡¨ø‡¨Å‡•§"),
        "no_diagnosis": "‡¨è‡¨π‡¨ø ‡¨≤‡¨ï‡≠ç‡¨∑‡¨£‡¨ó‡≠Å‡¨°‡¨ø‡¨ï‡¨∞‡≠Å ‡¨Æ‡≠Å‡¨Å ‡¨ï‡≠å‡¨£‡¨∏‡¨ø ‡¨®‡¨ø‡¨∞‡≠ç‡¨£‡≠ç‡¨£‡≠ü ‡¨ï‡¨∞‡¨ø‡¨™‡¨æ‡¨∞‡¨ø‡¨≤‡¨ø ‡¨®‡¨æ‡¨π‡¨ø‡¨Å‡•§ ‡¨∏‡¨†‡¨ø‡¨ï‡≠ç ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨™‡¨æ‡¨á‡¨Å ‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞‡¨ô‡≠ç‡¨ï ‡¨∏‡¨π‡¨ø‡¨§ ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§",
        "disease_not_found": "‡¨ï‡≠ç‡¨∑‡¨Æ‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å, ‡¨Æ‡≠Å‡¨Å ‡¨Æ‡≠ã‡¨∞ ‡¨°‡¨æ‡¨ü‡¨æ‡¨¨‡≠á‡¨∏‡¨∞‡≠á ‡¨∏‡≠á‡¨π‡¨ø ‡¨∞‡≠ã‡¨ó ‡¨¨‡¨ø‡¨∑‡≠ü‡¨∞‡≠á ‡¨ï‡≠å‡¨£‡¨∏‡¨ø ‡¨∏‡≠Ç‡¨ö‡¨®‡¨æ ‡¨™‡¨æ‡¨á‡¨≤‡¨ø ‡¨®‡¨æ‡¨π‡¨ø‡¨Å‡•§",
        "consult_doctor": "‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨ß‡≠ç‡≠ü‡¨æ‡¨® ‡¨¶‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å: ‡¨è‡¨π‡¨æ ‡¨è‡¨ï ‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞‡≠Ä ‡¨®‡¨ø‡¨∞‡¨æ‡¨ï‡¨∞‡¨£ ‡¨®‡≠Å‡¨π‡≠á‡¨Å‡•§ ‡¨∏‡¨†‡¨ø‡¨ï‡≠ç ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨™‡¨æ‡¨á‡¨Å ‡¨Ü‡¨™‡¨£ ‡¨ú‡¨£‡≠á ‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞‡¨ô‡≠ç‡¨ï ‡¨∏‡¨π‡¨ø‡¨§ ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨ï‡¨∞‡¨ø‡¨¨‡¨æ ‡¨â‡¨ö‡¨ø‡¨§‡≠ç‡•§",
        "error": "‡¨ï‡≠ç‡¨∑‡¨Æ‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å, ‡¨è‡¨ï ‡¨§‡≠ç‡¨∞‡≠Å‡¨ü‡¨ø ‡¨ò‡¨ü‡¨ø‡¨õ‡¨ø‡•§ ‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨™‡¨∞‡≠á ‡¨™‡≠Å‡¨£‡¨ø ‡¨ö‡≠á‡¨∑‡≠ç‡¨ü‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§"
    }
}

def get_diagnosis_from_db(symptoms_text, lang):
    """Diagnose symptoms using multi-lingual keywords with safe dictionary access."""
    user_symptoms = set(symptoms_text.lower().replace("and", "").replace(",", "").split())
    
    if not user_symptoms:
        return translations.get(lang, {}).get('symptom_prompt', "Please describe your symptoms.")

    best_match = None
    max_matches = 0

    for disease, data in health_data.get('diseases', {}).items():
        disease_keywords = set(data.get('symptoms_keywords', []))
        matches = len(user_symptoms.intersection(disease_keywords))
        
        if matches > max_matches:
            max_matches = matches
            best_match = disease

    if max_matches > 0 and best_match:
        disease_info = health_data.get('diseases', {}).get(best_match, {})
        
        default_name = disease_info.get('name_en', 'Unknown Disease')
        default_prevention = "Prevention info not available."
        default_treatment = "Treatment info not available."
        
        if lang == 'hi':
            response = (
                f"‡§Ü‡§™‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞, ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ '{disease_info.get('name_hi', default_name)}' ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§\n\n"
                f"*‡§∞‡•ã‡§ï‡§•‡§æ‡§Æ*: {disease_info.get('prevention_hi', default_prevention)}\n"
                f"*‡§â‡§™‡§ö‡§æ‡§∞*: {disease_info.get('treatment_hi', default_treatment)}\n\n"
                f"{translations.get(lang, {}).get('consult_doctor', '')}"
            )
        elif lang == 'or':
            response = (
                f"‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï ‡¨≤‡¨ï‡≠ç‡¨∑‡¨£ ‡¨Ö‡¨®‡≠Å‡¨Ø‡¨æ‡≠ü‡≠Ä, ‡¨∏‡¨Æ‡≠ç‡¨≠‡¨æ‡¨¨‡¨ø‡¨§ ‡¨∏‡¨Æ‡¨∏‡≠ç‡≠ü‡¨æ '{disease_info.get('name_or', default_name)}' ‡¨π‡≠ã‡¨á‡¨™‡¨æ‡¨∞‡≠á‡•§\n\n"
                f"*‡¨™‡≠ç‡¨∞‡¨§‡¨ø‡¨∞‡≠ã‡¨ß*: {disease_info.get('prevention_or', default_prevention)}\n"
                f"*‡¨ö‡¨ø‡¨ï‡¨ø‡¨§‡≠ç‡¨∏‡¨æ*: {disease_info.get('treatment_or', default_treatment)}\n\n"
                f"{translations.get(lang, {}).get('consult_doctor', '')}"
            )
        else:
            response = (
                f"Based on your symptoms, the potential issue could be '{disease_info.get('name_en', default_name)}'.\n\n"
                f"*Prevention*: {disease_info.get('prevention_en', default_prevention)}\n"
                f"*Treatment*: {disease_info.get('treatment_en', default_treatment)}\n\n"
                f"{translations.get(lang, {}).get('consult_doctor', '')}"
            )
        return response
    
    return translations.get(lang, {}).get('no_diagnosis', "Could not identify a condition.")

def get_disease_info_from_db(disease_name, lang):
    """Search for a disease by name using multi-lingual terms with safe dictionary access."""
    search_term = disease_name.lower().strip()
    
    for disease, data in health_data.get('diseases', {}).items():
        if search_term in data.get('search_terms', []):
            
            default_name = data.get('name_en', 'Unknown Disease')
            default_symptoms = "Symptoms info not available."
            default_prevention = "Prevention info not available."
            default_treatment = "Treatment info not available."
            
            symptoms_list = data.get('symptoms_en', [])
            symptoms_str = ', '.join(symptoms_list).title() if symptoms_list else default_symptoms

            if lang == 'hi':
                response = (
                    f"*{data.get('name_hi', default_name)}*\n\n"
                    f"*‡§≤‡§ï‡•ç‡§∑‡§£*: {symptoms_str}\n\n"
                    f"*‡§∞‡•ã‡§ï‡§•‡§æ‡§Æ*: {data.get('prevention_hi', default_prevention)}\n\n"
                    f"*‡§â‡§™‡§ö‡§æ‡§∞*: {data.get('treatment_hi', default_treatment)}"
                )
            elif lang == 'or':
                response = (
                    f"*{data.get('name_or', default_name)}*\n\n"
                    f"*‡¨≤‡¨ï‡≠ç‡¨∑‡¨£*: {symptoms_str}\n\n"
                    f"*‡¨™‡≠ç‡¨∞‡¨§‡¨ø‡¨∞‡≠ã‡¨ß*: {data.get('prevention_or', default_prevention)}\n\n"
                    f"*‡¨ö‡¨ø‡¨ï‡¨ø‡¨§‡≠ç‡¨∏‡¨æ*: {data.get('treatment_or', default_treatment)}"
                )
            else:
                response = (
                    f"*{data.get('name_en', default_name)}*\n\n"
                    f"*Symptoms*: {symptoms_str}\n\n"
                    f"*Prevention*: {data.get('prevention_en', default_prevention)}\n\n"
                    f"*Treatment*: {data.get('treatment_en', default_treatment)}"
                )
            return response
            
    return translations.get(lang, {}).get('disease_not_found', "Disease not found.")

@app.route('/webhook', methods=['POST'])
def webhook():
    """Main webhook to handle incoming WhatsApp messages."""
    incoming_msg = request.values.get('Body', '').lower().strip()
    from_number = request.values.get('From')
    
    twiml_response = MessagingResponse()
    response_text = ""
    
    session = user_sessions.get(from_number, {"lang": None, "state": "start"})
    
    current_state = session.get("state")
    
    if incoming_msg in ["hi", "hello", "‡§®‡§Æ‡§∏‡•ç‡§§‡•á", "‡¨®‡¨Æ‡¨∏‡≠ç‡¨ï‡¨æ‡¨∞", "restart"]:
        session = {"lang": None, "state": "start"}
        current_state = "start"
        
    elif incoming_msg == "menu":
        if session.get("lang"):
            session["state"] = "main_menu"
            current_state = "main_menu"
        else:
            session = {"lang": None, "state": "start"}
            current_state = "start"
            
    if current_state == "start":
        response_text = translations["en"]["welcome"]
        session["state"] = "lang_select"
        
    elif current_state == "lang_select":
        lang_chosen = None
        if "1" in incoming_msg or "english" in incoming_msg:
            lang_chosen = "en"
        elif "2" in incoming_msg or "hindi" in incoming_msg or "‡§π‡§ø‡§Ç‡§¶‡•Ä" in incoming_msg:
            lang_chosen = "hi"
        elif "3" in incoming_msg or "odia" in incoming_msg or "‡¨ì‡¨°‡¨º‡¨ø‡¨Ü" in incoming_msg:
            lang_chosen = "or"
        
        if lang_chosen in ["en", "hi", "or"]:
            session["lang"] = lang_chosen
            session["state"] = "main_menu"
            response_text = translations[lang_chosen]["menu"]
        else:
            response_text = translations["en"]["welcome"]
            
    elif current_state == "main_menu":
        lang = session.get("lang", "en")
        if "1" in incoming_msg:
            session["state"] = "symptom_check"
            response_text = translations[lang]["symptom_prompt"]
        elif "2" in incoming_msg:
            response_text = translations[lang]["alert_info"]
        elif "3" in incoming_msg:
            response_text = translations[lang]["vaccine_info"]
        elif "4" in incoming_msg:
            session["state"] = "disease_search"
            response_text = translations[lang]["disease_prompt"]
        else:
            response_text = translations[lang]["menu"]
            
    elif current_state == "symptom_check":
        lang = session.get("lang", "en")
        diagnosis_result = get_diagnosis_from_db(incoming_msg, lang)
        response_text = f"{diagnosis_result}\n\n{translations[lang]['symptom_repeat']}"
        
    elif current_state == "disease_search":
        lang = session.get("lang", "en")
        disease_info_result = get_disease_info_from_db(incoming_msg, lang)
        response_text = f"{disease_info_result}\n\n{translations[lang]['disease_repeat']}"
        
    user_sessions[from_number] = session
    twiml_response.message(response_text)
    return str(twiml_response)

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=True)
