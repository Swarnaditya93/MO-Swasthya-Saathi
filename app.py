import os
import json
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse

app = Flask(__name__)

# --- Load the local health database ---
with open('database.json', 'r', encoding='utf-8') as f:
    health_data = json.load(f)

# In-memory session storage for multi-turn conversation
user_sessions = {}

# --- Language Translations ---
translations = {
    "en": {
        "welcome": "Hello! I am MO Swasthya Saathi üôè\nPlease select your language:\n1. English\n2. ‡¨ì‡¨°‡¨º‡¨ø‡¨Ü (Odia)",
        "menu": "How can I help you?\n1. Check Symptoms\n2. Health Alerts\n3. Vaccination Info",
        "symptom_prompt": "Please describe your symptoms. For example: 'I have fever, headache, and a cough'.",
        "alert_info": "Current Health Alert for Bhubaneswar: Increased Dengue cases reported. Please ensure there is no stagnant water near your home.",
        "vaccine_info": health_data.get("vaccination_schedule_en", "Vaccination info not found."),
        "no_diagnosis": "I could not identify a specific condition from those symptoms. For accurate advice, please consult a doctor.",
        "consult_doctor": "Please note: This is not a medical diagnosis. You should consult with a real doctor.",
        "error": "Sorry, an error occurred. Please try again later."
    },
    "or": {
        "welcome": "‡¨®‡¨Æ‡¨∏‡≠ç‡¨ï‡¨æ‡¨∞! ‡¨Æ‡≠Å‡¨Å MO ‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨∏‡¨æ‡¨•‡≠Ä üôè\n‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï ‡¨≠‡¨æ‡¨∑‡¨æ ‡¨¨‡¨æ‡¨õ‡¨®‡≠ç‡¨§‡≠Å:\n1. English\n2. ‡¨ì‡¨°‡¨º‡¨ø‡¨Ü",
        "menu": "‡¨Æ‡≠Å‡¨Å ‡¨ï‡¨ø‡¨™‡¨∞‡¨ø ‡¨∏‡¨æ‡¨π‡¨æ‡¨Ø‡≠ç‡≠ü ‡¨ï‡¨∞‡¨ø‡¨™‡¨æ‡¨∞‡¨ø‡¨¨‡¨ø?\n1. ‡¨≤‡¨ï‡≠ç‡¨∑‡¨£ ‡¨Ø‡¨æ‡¨û‡≠ç‡¨ö ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å\n2. ‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨∏‡¨§‡¨∞‡≠ç‡¨ï‡¨§‡¨æ\n3. ‡¨ü‡≠Ä‡¨ï‡¨æ‡¨ï‡¨∞‡¨£ ‡¨∏‡≠Ç‡¨ö‡¨®‡¨æ",
        "symptom_prompt": "‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï ‡¨≤‡¨ï‡≠ç‡¨∑‡¨£ ‡¨¨‡¨∞‡≠ç‡¨£‡≠ç‡¨£‡¨®‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§ ‡¨â‡¨¶‡¨æ‡¨π‡¨∞‡¨£: '‡¨Æ‡≠ã‡¨§‡≠á ‡¨ú‡≠ç‡≠±‡¨∞, ‡¨Æ‡≠Å‡¨£‡≠ç‡¨°‡¨¨‡¨ø‡¨®‡≠ç‡¨ß‡¨æ, ‡¨è‡¨¨‡¨Ç ‡¨ï‡¨æ‡¨∂ ‡¨Ö‡¨õ‡¨ø'‡•§",
        "alert_info": "‡¨≠‡≠Å‡¨¨‡¨®‡≠á‡¨∂‡≠ç‡≠±‡¨∞ ‡¨™‡¨æ‡¨á‡¨Å ‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨∏‡¨§‡¨∞‡≠ç‡¨ï‡¨§‡¨æ: ‡¨°‡≠á‡¨ô‡≠ç‡¨ó‡≠Å ‡¨Æ‡¨æ‡¨Æ‡¨≤‡¨æ ‡¨¨‡≠É‡¨¶‡≠ç‡¨ß‡¨ø ‡¨™‡¨æ‡¨á‡¨õ‡¨ø‡•§ ‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï ‡¨ò‡¨∞ ‡¨™‡¨æ‡¨ñ‡¨∞‡≠á ‡¨™‡¨æ‡¨£‡¨ø ‡¨ú‡¨Æ‡¨æ ‡¨®‡¨π‡≠á‡¨¨‡¨æ‡¨ï‡≠Å ‡¨¶‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å‡•§",
        "vaccine_info": health_data.get("vaccination_schedule_or", "‡¨ü‡≠Ä‡¨ï‡¨æ‡¨ï‡¨∞‡¨£ ‡¨∏‡≠Ç‡¨ö‡¨®‡¨æ ‡¨Æ‡¨ø‡¨≥‡¨ø‡¨≤‡¨æ ‡¨®‡¨æ‡¨π‡¨ø‡¨Å‡•§"),
        "no_diagnosis": "‡¨è‡¨π‡¨ø ‡¨≤‡¨ï‡≠ç‡¨∑‡¨£‡¨ó‡≠Å‡¨°‡¨ø‡¨ï‡¨∞‡≠Å ‡¨Æ‡≠Å‡¨Å ‡¨ï‡≠å‡¨£‡¨∏‡¨ø ‡¨®‡¨ø‡¨∞‡≠ç‡¨£‡≠ç‡¨£‡≠ü ‡¨ï‡¨∞‡¨ø‡¨™‡¨æ‡¨∞‡¨ø‡¨≤‡¨ø ‡¨®‡¨æ‡¨π‡¨ø‡¨Å‡•§ ‡¨∏‡¨†‡¨ø‡¨ï‡≠ç ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨™‡¨æ‡¨á‡¨Å ‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞‡¨ô‡≠ç‡¨ï ‡¨∏‡¨π‡¨ø‡¨§ ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§",
        "consult_doctor": "‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨ß‡≠ç‡≠ü‡¨æ‡¨® ‡¨¶‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å: ‡¨è‡¨π‡¨æ ‡¨è‡¨ï ‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞‡≠Ä ‡¨®‡¨ø‡¨∞‡¨æ‡¨ï‡¨∞‡¨£ ‡¨®‡≠Å‡¨π‡≠á‡¨Å‡•§ ‡¨∏‡¨†‡¨ø‡¨ï‡≠ç ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨™‡¨æ‡¨á‡¨Å ‡¨Ü‡¨™‡¨£ ‡¨ú‡¨£‡≠á ‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞‡¨ô‡≠ç‡¨ï ‡¨∏‡¨π‡¨ø‡¨§ ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨ï‡¨∞‡¨ø‡¨¨‡¨æ ‡¨â‡¨ö‡¨ø‡¨§‡≠ç‡•§",
        "error": "‡¨ï‡≠ç‡¨∑‡¨Æ‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å, ‡¨è‡¨ï ‡¨§‡≠ç‡¨∞‡≠Å‡¨ü‡¨ø ‡¨ò‡¨ü‡¨ø‡¨õ‡¨ø‡•§ ‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨™‡¨∞‡≠á ‡¨™‡≠Å‡¨£‡¨ø ‡¨ö‡≠á‡¨∑‡≠ç‡¨ü‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§"
    }
}

def get_diagnosis_from_db(symptoms_text, lang):
    """Function to diagnose symptoms based on the local JSON database."""
    user_symptoms = set(symptoms_text.lower().replace("and", "").replace(",", "").split())
    
    best_match = None
    max_matches = 0

    for disease, data in health_data.get('diseases', {}).items():
        disease_symptoms = set(data['symptoms_en'])
        matches = len(user_symptoms.intersection(disease_symptoms))
        
        if matches > max_matches:
            max_matches = matches
            best_match = disease

    if max_matches > 0:
        disease_info = health_data['diseases'][best_match]
        if lang == 'or':
            response = (
                f"‡¨≤‡¨ï‡≠ç‡¨∑‡¨£ ‡¨Ö‡¨®‡≠Å‡¨Ø‡¨æ‡≠ü‡≠Ä, ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï‡≠Å '{disease_info['name_or']}' ‡¨π‡≠ã‡¨á‡¨™‡¨æ‡¨∞‡≠á‡•§\n\n"
                f"*‡¨™‡≠ç‡¨∞‡¨§‡¨ø‡¨∞‡≠ã‡¨ß*: {disease_info['prevention_or']}\n"
                f"*‡¨ö‡¨ø‡¨ï‡¨ø‡¨§‡≠ç‡¨∏‡¨æ*: {disease_info['treatment_or']}\n\n"
                f"{translations[lang]['consult_doctor']}"
            )
        else: # Default to English
            response = (
                f"Based on your symptoms, the potential issue could be '{best_match.replace('_', ' ').title()}'.\n\n"
                f"*Prevention*: {disease_info['prevention_en']}\n"
                f"*Treatment*: {disease_info['treatment_en']}\n\n"
                f"{translations[lang]['consult_doctor']}"
            )
        return response
    
    return translations[lang]['no_diagnosis']

@app.route('/webhook', methods=['POST'])
def webhook():
    """Main webhook to handle incoming WhatsApp messages."""
    incoming_msg = request.values.get('Body', '').lower().strip()
    from_number = request.values.get('From')
    
    twiml_response = MessagingResponse()
    response_text = ""

    session = user_sessions.get(from_number, {"lang": None, "state": "start"})
    
    if session["state"] == "start":
        response_text = translations["en"]["welcome"]
        session["state"] = "lang_select"
    elif session["state"] == "lang_select":
        if "1" in incoming_msg:
            session["lang"] = "en"
            session["state"] = "main_menu"
            response_text = translations["en"]["menu"]
        elif "2" in incoming_msg:
            session["lang"] = "or"
            session["state"] = "main_menu"
            response_text = translations["or"]["menu"]
        else:
            response_text = translations["en"]["welcome"]
    elif session["state"] == "main_menu":
        lang = session["lang"]
        if "1" in incoming_msg:
            response_text = translations[lang]["symptom_prompt"]
            session["state"] = "symptom_check"
        elif "2" in incoming_msg:
            response_text = translations[lang]["alert_info"]
        elif "3" in incoming_msg:
            response_text = translations[lang]["vaccine_info"]
        else:
            response_text = translations[lang]["menu"]
    elif session["state"] == "symptom_check":
        lang = session["lang"]
        diagnosis_result = get_diagnosis_from_db(incoming_msg, lang)
        response_text = diagnosis_result
        session["state"] = "main_menu" # Reset state for the next command
    
    user_sessions[from_number] = session
    twiml_response.message(response_text)
    return str(twiml_response)

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
